%
% AE508 Optimal Space Trajectories, Spring 2025
% Course Project
% 
% Team: petern4@illinois.edu, pc46@illinois.edu, davisr2@illinois.edu
%

clearvars; close all; clc;
format longg;
addpath(".");

function PhiDot = phidot(v,m,va,ma)
    denom = sqrt(m^2*dot(v,v) + ma^2*dot(va,va) - 2*m*ma*dot(v,va));
    lam_x = m*(m*v(1) - ma*va(1))/denom;
    lam_y = m*(m*v(2) - ma*va(2))/denom;
    lam_z = m*(m*v(3) - ma*va(3))/denom;
    lam_m = m*dot(v,v) - ma*dot(va,v);
    PhiDot = [-lam_x; -lam_y; -lam_z;-lam_m];
end

function err = maxMomentum(lam0guess,t0,tf,x0,xf,T,c,rho,opts_ode,m0,m_a,mu)
    vvec_a = xf(4:6); % the velocity of the asteroid
    [t, X] = ode45(@eom, [t0 tf], [x0; m0; lam0guess(1:7)],opts_ode,T,c,rho,mu);
    m_tf = X(end,7);
    lam_v_tf = X(end,11:13)';
    lam_m_tf = X(end, 14);
    vvec_tf = X(end,4:6);

    PhiDot = phidot(vvec_tf,m_tf,vvec_a,m_a);
    %H = hamiltonian(t,X,T,c,rho,mu);
    % See my notes, page 101, the last term H(end) 
    err = [X(end,1:3)' - xf(1:3); 
        X(end,11:13)' - PhiDot(1:3);...
        X(end,14) - PhiDot(4)];
end

state_values = init();
state_values.T = state_values.T * 0.5;
state.tf = 779250.236767169; % time of flight, in seconds
% state_values.tf = state_values.tf * 0.8;

% Solve the Lambert's equation analytically
[v1,v2] = lambert( ...
    state_values.r0, ...
    state_values.rf, ...
    state_values.tf, ...
    state_values.mu);

% x0 = [state_values.r0;v1];
x0 = [state_values.r0;v1];
xf = [state_values.rf;state_values.vf];

rho = 1.0;
%
opts_ode = odeset('RelTol',1e-13,'AbsTol',1e-15); % ode
options = optimoptions('fsolve','Display','iter','MaxFunEvals',2e3,...
    'MaxIter',2e3,'TolFun',1e-12,'TolX',1e-14,...
    'UseParallel',false);
%
% Solve Maximum momentum transfer optimal trajectory problem.
%
lam_guess = 1e-5*ones(7,1);
[p0,~] = fsolve(@maxMomentum, ...
    lam_guess, ...
    options, ...
    state_values.t0, ...
    state_values.tf, ...
    x0, ...
    xf, ...
    state_values.T, ...
    state_values.c, ...
    rho, ...
    opts_ode, ...
    state_values.m0, ...
    state_values.m_a, ...
    state_values.mu);
[t, X] = ode45(@eom, [state_values.t0 state_values.tf], ...
    [x0; state_values.m0; p0(1:7)], ...
    opts_ode, ...
    state_values.T, ...
    state_values.c, ...
    rho, ...
    state_values.mu);

% The terminal constraint
dr = X(end,1:3)' - state_values.rf

if norm(dr) < 1e-3
    H = hamiltonian(t,X, ...
        state_values.T, ...
        state_values.c, ...
        rho, ...
        state_values.mu);
    %
    % Plot the Hamiltonian
    %
    plot(t, H, 'LineWidth', 1.5);
    % Plot the states, costates, control and the optimal trajectory
    plots(t,X,r0,v0,mu_e);
else
    fprintf("The position at t=0: r0 = %.3f, %.3f, %.3f, norm=%.6f\n", ...
        state_values.r0(1), ...
        state_values.r0(2), ...
        state_values.r0(3), ...
        norm(state_values.r0));
    fprintf("The position at t=tf: r0 = %.3f, %.3f, %.3f, norm=%.6f\n", ...
        state_values.rf(1), ...
        state_values.rf(2), ...
        state_values.rf(3), ...
        norm(state_values.rf));
    fprintf("The solution didnt converge, dr=%.6f\n", norm(dr));
end
